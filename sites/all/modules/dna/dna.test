<?php
class DnaUnitTests extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'DNA Module Unit Tests',
      'description' => 'Test that get_dna() function works properly',
      'group' => 'Biscuited Tests',
    );
  }

  function testGetDnaOfA() {
    $input = 'A';
    $result = get_dna($input);
    $this->assertEqual($result, "T");
  }

  function testGetDnaOfT() {
    $input = 'T';
    $result = get_dna($input);
    $this->assertEqual($result, "A");
  }

  function testGetDnaOfC() {
    $input = 'C';
    $result = get_dna($input);
    $this->assertEqual($result, "G");
  }

  function testGetDnaOfG() {
    $input = 'G';
    $result = get_dna($input);
    $this->assertEqual($result, "C");
  }

  function testGetDnaOfAT() {
    $input = 'AT';
    $result = get_dna($input);
    $this->assertEqual($result, "TA");
  }

  function testGetDnaOfLongSequence() {
    $input = 'ATCGTAC';
    $result = get_dna($input);
    $this->assertEqual($result, "TAGCATG");
  }
}

class DnaFunctionalTests extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'DNA Module Functional Tests',
      'description' => 'Test that the DNA input form functions properly',
      'group' => 'Biscuited Tests',
    );
  }

  public function setUp() {
    parent::setUp(array('dna'));

    $user = $this->drupalCreateAuthenticatedUser();
    $this->drupalLogin($user);

    $info = array();
    $info['input'] = "AT";
    //found the URL to post the form to by manually clicking to the Add Content menu and clicking on Page.
    $this->drupalPost('dna', $info, t('submit'));

    $path['source'] = 'dna';
    $path['alias'] = 'dna_form';
    path_save($path);
  }

  public function testDnaForm() {
    $this->drupalGet('dna');
    $this->assertText("Input", 'The text on the page is correct. Hoorah!');

    $this->drupalGet('dna_success');
    $this->assertText("TA", 'The text on the page is correct. Hoorah!');
  }

  public function drupalCreateAdminUser($permissions = array()) {
    $roles = user_roles();
    $index = array_search('administrator', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'administrator';
    return user_save($user);
  }

  public function drupalCreateAuthenticatedUser($permissions = array()) {
    $roles = user_roles();
    $index = array_search('authenticated', $roles);
    $user = $this->drupalCreateUser($permissions);
    $user->roles[$index] = 'authenticated';
    return user_save($user);
  }
}
